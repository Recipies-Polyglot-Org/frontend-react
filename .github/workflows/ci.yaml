name: CI

on:
  push:
    branches: [ "master" ]
  workflow_dispatch: {}

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.get_sha.outputs.short_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: get_sha
        name: Get short SHA
        run: echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      # ----------------------
      # Formatting (Prettier) - advisory by default
      # ----------------------
      - name: Format check (Prettier)
        run: |
          if npm run format:check --silent; then
            echo "Prettier check passed"
          else
            echo "Prettier formatting issues detected (non-blocking). To enforce, remove the || true."
            npm run format:check --silent || true
          fi
        continue-on-error: false

      # ----------------------
      # Lint (ESLint) - fail on errors
      # ----------------------
      - name: Lint (ESLint)
        run: npm run lint

      # ----------------------
      # SCA - npm audit (report only; optionally fail on high/critical)
      # ----------------------
      - name: SCA - npm audit (report)
        run: |
          npm audit --json > audit.json || true
          cat audit.json
          # Optional: fail when high/critical are present
          # HIGH=$(jq '.metadata.vulnerabilities.high' audit.json)
          # CRIT=$(jq '.metadata.vulnerabilities.critical' audit.json)
          # if [ "$HIGH" -gt 0 ] || [ "$CRIT" -gt 0 ]; then
          #   echo "High/Critical vulnerabilities detected"; exit 1; fi

      # ----------------------
      # SAST - Semgrep (OWASP top ten ruleset)
      # ----------------------
      - name: SAST - Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/owasp-top-ten
        # If you want this to be advisory, add: continue-on-error: true

      # ----------------------
      # Unit tests (Jest) - fail on errors
      # ----------------------
      - name: Run unit tests (Jest)
        env:
          CI: true
        run: npm test --silent

      # ----------------------
      # Build production bundle
      # ----------------------
      - name: Build
        run: npm run build

      # ----------------------
      # Docker build & push (sha + latest)
      # ----------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push Docker image
        env:
          SHORT_SHA: ${{ steps.get_sha.outputs.short_sha }}
        run: |
          IMAGE="${IMAGE_NAME}"
          # If Dockerfile not at repo root, set BUILD_DIR
          BUILD_DIR=${{ env.BUILD_DIR || '.' }}
          docker build -f $BUILD_DIR/Dockerfile -t "$IMAGE:sha-$SHORT_SHA" -t "$IMAGE:latest" $BUILD_DIR
          docker push "$IMAGE:sha-$SHORT_SHA"
          docker push "$IMAGE:latest"

      - name: Upload audit & semgrep artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports-${{ steps.get_sha.outputs.short_sha }}
          path: |
            audit.json
            semgrep-results.sarif || true
